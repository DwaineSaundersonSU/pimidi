Introduction
- - - - - - -

raveloxmidi is a simple proxy to send MIDI NoteOn and NoteOff events from the local machine via RTP MIDI.

The reason for writing this was to generate note events from a Raspberry Pi to send them to Logic Pro X. In particular, using the Raspberry Pi to handle input from drum pads.
Thanks to feedback from a couple of users, I've also tested this with rtpMIDI on Windows talking to FL Studio 11.

Except for the Avahi code, it’s all mine but I have leaned heavily on the following references:

RTP MIDI: An RTP Payload Format for MIDI ( http://www.eecs.berkeley.edu/~lazzaro/rtpmidi/index.html )
The RTP MIDI dissector in wireshark. Written by Tobias Erichsen ( http://www.tobias-erichsen.de )

Note: Where possible, I've tried to use RTP MIDI to mean the protocol and rtpMIDI to mean the software written by Tobias Erichsen. Some mistakes may be present but,
in most cases, I am referring to the protocol

Description
- - - - - - 

There are a number of stages in the general RTP MIDI protocol, SIP, MIDI and feedback. The lazzaro document talks about SIP and feedback in terms of RTP but Apple has their own packet format for that information. raveloxmidi makes assumptions that may or may not be correct but the Apple MIDI SIP process isn’t documented.

Stage 1 - SIP
- - - - - - - 

Audio MIDI setup needs to know which server to connect to. In order to do that, the raveloxmidi announces the Apple MIDI service (_apple-midi._udp). By default, the announcement is for connections on port 5004. This also implies port 5005 is open for connections too.

The connecting server will sent 2 connection (INV) requests containing its name, its IP address and the port that connections can be made on.

raveloxmidi will accept the first INV request and store the connection information in a table ( limited to 8 entries ) for later use.

raveloxmidi sends back an OK response to both requests.

The connecting server will send SYNC packets to raveloxmidi. According to http://en.wikipedia.org/wiki/RTP_MIDI, the sender will send timestamp1 to indicate its local time. This timestamp isn't an actual time value but can be a delta from a local value, the receiver will send timestamp2 with its local delta and then the sender will send timestamp3 indicating the time it received the timestamp2 response from the receiver. This gives the system an idea of latency.

SYNC packets are sent from the connecting server on a regular basis.

Stage 2 - MIDI
- - - - - - - 

This stage uses the defined MIDI RTP payload. raveloxmidi opens an additional listening port (by default 5006) which will accept a simple data packet containing note information. Where Apple MIDI packets are prefixed with a single byte 0xff, note data packets are expected to be prefixed with 0xaa. The rest of data packet is expected to be a MIDI Note command.

Command: 4 bits ( NoteOn = 0x9, NoteOff = 0x8 )
Channel: 4 bits ( 0 - 15 )
Note: 8 bits ( -127 to 127 )
Velocity: 8 bits ( 0 to 127 )

When raveloxmidi receives the note packet, it will send that MIDI command to any  active connections in the connection table. 

The RTP MIDI payload specification also requires a recovery journal ( see section 4 of RFC6295 at http://www.rfc-editor.org/rfc/rfc6295.txt ). raveloxmidi will add the note events to the journal and attach the journal in each RTP packet sent to the connecting server. As raveloxmidi is only concerned with NoteOn and NoteOff events, only Chapter N journal entries are stored.

Stage 3 - Feedback
- - - - - - - - - 

The Apple MIDI implementation sends a feedback packet (RS) from the connecting server. This packet contains a RTP sequence number to indicate that the connecting server is acknowledging that it has received packets with a sequence number up to and including that particular value.

This tells the receiving server that it doesn’t need to send journal events for any packets with a sequence number lower than that value.

raveloxmidi keeps track of the sequence number in the connection table and, if the value in the feedback packet is greater than or equal to the value in the table, the journal will be reset. 

Configuration
- - - - - - -
raveloxmidi can be run with a -c parameter to specify a configuration file with the options listed below.
Where the option isn't specified, a default value is used.

For debugging, you can run raveloxmidi -N -d to keep raveloxmidi in the foreground and send debug-level output to stderr.

network.bind_address
	IP address that raveloxmidi listens on. Default is 0.0.0.0 ( meaning all interfaces ).
network.control.port
	Main RTP MIDI listening port for new connections and shutdowns. Used in the zeroconf definition for the RTP MIDI service.
	Default is 5004.
network.data.port
	Listening port for all other data in the conversation. Default is 5005.
network.note.port
	Listening port for accepting MIDI notes. Default is 5006.
network.max_connections
	Maximum number of incoming connections that can be stored. Default is 8.
service.name
	Name used in the zeroconf definition for the RTP MIDI service. Default is 'raveloxmidi'.
network.socket_interval
	Polling interval for the listening sockets. Default is 5000 microseconds.
run_as_daemon
	Specifies that raveloxmidi should run in the background. Default is yes.
daemon.pid_file
	If raveloxmidi is run in the background. The pid for the process is written to this file. Default is raveloxmidi.pid.
logging.enabled
	Set to yes to write output to a log file. Set to no to disable. Default is "yes".
logging.log_file
	Name of file to write logging to. Default is stderr.
logging.log_level
	Threshold for log events. Acceptable values are debug,info,normal,warning and error. Default is normal.
security.check
	If set to yes, it is not possible to write the daemon pid to a file with executable permissions. Default is yes.
